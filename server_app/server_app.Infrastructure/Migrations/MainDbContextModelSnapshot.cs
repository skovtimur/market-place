// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server_app.Infrastructure;

#nullable disable

namespace server_app.Infrastructure.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server_app.Domain.Entities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.Ratings.RatingEntity", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<int>("TotalRating")
                        .HasColumnType("integer")
                        .HasColumnName("total_rating");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("server_app.Domain.Users.Tokens.RefreshTokenEntity", b =>
                {
                    b.Property<string>("TokenHash")
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TokenHash");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("refresh_tokens", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("UserEntity", b =>
                {
                    b.HasBaseType("server_app.Domain.Entities.Entity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerify")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verify");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.DeliveryCompanies.DeliveryCompanyEntity", b =>
                {
                    b.HasBaseType("server_app.Domain.Entities.Entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("delivery_companies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a0"),
                            Description = "Description 1",
                            Name = "DeliveryCompanyNum 1"
                        },
                        new
                        {
                            Id = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a1"),
                            Description = "Blahblahblah",
                            Name = "Transporter company"
                        },
                        new
                        {
                            Id = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a2"),
                            Description = "Blah blah blah",
                            Name = "Some Dodecahedron"
                        },
                        new
                        {
                            Id = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a5"),
                            Description = "Blah123 blah blah...",
                            Name = "Some DC"
                        });
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.ProductCategoryEntity", b =>
                {
                    b.HasBaseType("server_app.Domain.Entities.Entity");

                    b.Property<Guid>("DeliveryCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("delivery_company_id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("EstimationCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("estimation_count");

                    b.Property<Guid>("MainImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_image_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("seller_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("TotalEstimation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_estimation");

                    b.HasIndex("DeliveryCompanyId");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.ToTable("product_categories", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProductCategories_EstimationCount", "estimation_count >= 0");

                            t.HasCheckConstraint("CK_ProductCategories_TotalEstimation", "total_estimation >= 0 AND total_estimation <= 10");
                        });
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.PurchasedProducts.PurchasedProductEntity", b =>
                {
                    b.HasBaseType("server_app.Domain.Entities.Entity");

                    b.Property<Guid?>("BuyerId")
                        .HasColumnType("uuid")
                        .HasColumnName("buyer_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_date");

                    b.Property<Guid>("MainImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("main_image_id");

                    b.Property<DateTime>("MustDeliveredBefore")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("must_delivered_before");

                    b.Property<DateTime>("PurchasedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchased_date");

                    b.Property<int>("PurchasedQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("purchased_quantity");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("numeric")
                        .HasColumnName("total_sum");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CategoryId");

                    b.ToTable("purchased_products", (string)null);
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.Ratings.RatingFromCustomerEntity", b =>
                {
                    b.HasBaseType("server_app.Domain.Entities.Entity");

                    b.Property<Guid>("CommonRatingId")
                        .HasColumnType("uuid")
                        .HasColumnName("common_ratting_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("ratting");

                    b.HasIndex("CommonRatingId");

                    b.HasIndex("CustomerId");

                    b.ToTable("rating_from_customers", (string)null);
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.Reviews.ReviewEntity", b =>
                {
                    b.HasBaseType("server_app.Domain.Entities.Entity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<int>("Estimation")
                        .HasColumnType("integer")
                        .HasColumnName("estimation");

                    b.Property<Guid>("ReviewOwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("text");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReviewOwnerId");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("server_app.Domain.Entities.Users.CreditCard.CreditCardEntity", b =>
                {
                    b.HasBaseType("server_app.Domain.Entities.Entity");

                    b.Property<decimal>("Many")
                        .HasColumnType("numeric")
                        .HasColumnName("many");

                    b.Property<string>("NumberHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_hash");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("credit_cards", (string)null);
                });

            modelBuilder.Entity("server_app.Domain.Entities.Users.Customer.CustomerEntity", b =>
                {
                    b.HasBaseType("UserEntity");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("server_app.Domain.Entities.Users.Seller.SellerEntity", b =>
                {
                    b.HasBaseType("UserEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("description");

                    b.ToTable("sellers", (string)null);
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.Ratings.RatingEntity", b =>
                {
                    b.HasOne("server_app.Domain.Entities.ProductCategories.ProductCategoryEntity", "ProductCategory")
                        .WithOne()
                        .HasForeignKey("server_app.Domain.Entities.ProductCategories.Ratings.RatingEntity", "ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("server_app.Domain.Users.Tokens.RefreshTokenEntity", b =>
                {
                    b.HasOne("UserEntity", null)
                        .WithOne()
                        .HasForeignKey("server_app.Domain.Users.Tokens.RefreshTokenEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_constraint");
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.DeliveryCompanies.DeliveryCompanyEntity", b =>
                {
                    b.OwnsOne("server_app.Domain.Entities.ProductCategories.ValueObjects.PhoneNumberValueObject", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("DeliveryCompanyEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("phone_number");

                            b1.HasKey("DeliveryCompanyEntityId");

                            b1.HasIndex("Number")
                                .IsUnique();

                            b1.ToTable("delivery_companies");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryCompanyEntityId");

                            b1.HasData(
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a0"),
                                    Number = "+7 888 032 0324"
                                },
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a1"),
                                    Number = "+6 533 003 0002"
                                },
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a2"),
                                    Number = "+7 007 942 2390"
                                },
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a5"),
                                    Number = "+1 117 955 0000"
                                });
                        });

                    b.OwnsOne("server_app.Domain.Entities.ProductCategories.ValueObjects.WebSiteValueObject", "WebSite", b1 =>
                        {
                            b1.Property<Guid>("DeliveryCompanyEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("WebSiteValue")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("website");

                            b1.HasKey("DeliveryCompanyEntityId");

                            b1.HasIndex("WebSiteValue")
                                .IsUnique();

                            b1.ToTable("delivery_companies");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryCompanyEntityId");

                            b1.HasData(
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a0"),
                                    WebSiteValue = "https://helloworld.gov/"
                                },
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a1"),
                                    WebSiteValue = "https://transporter.com/"
                                },
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a2"),
                                    WebSiteValue = "https://dodecahedron.org/"
                                },
                                new
                                {
                                    DeliveryCompanyEntityId = new Guid("ab977dee-7ba0-4c8e-9700-763d702977a5"),
                                    WebSiteValue = "https://metanit.com/sharp/aspnet6/"
                                });
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("WebSite")
                        .IsRequired();
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.ProductCategoryEntity", b =>
                {
                    b.HasOne("server_app.Domain.Entities.ProductCategories.DeliveryCompanies.DeliveryCompanyEntity", "DeliveryCompany")
                        .WithMany()
                        .HasForeignKey("DeliveryCompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("delivery_company_constraint");

                    b.HasOne("server_app.Domain.Entities.Users.Seller.SellerEntity", "Owner")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("seller_constraint");

                    b.OwnsOne("server_app.Domain.Entities.ProductCategories.ValueObjects.TagsValueObject", "Tags", b1 =>
                        {
                            b1.Property<Guid>("ProductCategoryEntityId")
                                .HasColumnType("uuid");

                            b1.PrimitiveCollection<List<string>>("Tags")
                                .IsRequired()
                                .HasColumnType("varchar[]")
                                .HasColumnName("tags");

                            b1.HasKey("ProductCategoryEntityId");

                            b1.ToTable("product_categories");

                            b1.WithOwner()
                                .HasForeignKey("ProductCategoryEntityId");
                        });

                    b.Navigation("DeliveryCompany");

                    b.Navigation("Owner");

                    b.Navigation("Tags")
                        .IsRequired();
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.PurchasedProducts.PurchasedProductEntity", b =>
                {
                    b.HasOne("server_app.Domain.Entities.Users.Customer.CustomerEntity", "Buyer")
                        .WithMany("Purchases")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("buyer_constraint");

                    b.HasOne("server_app.Domain.Entities.ProductCategories.ProductCategoryEntity", "Category")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("purchased_products_constraint");

                    b.Navigation("Buyer");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.Ratings.RatingFromCustomerEntity", b =>
                {
                    b.HasOne("server_app.Domain.Entities.ProductCategories.Ratings.RatingEntity", "CommonRating")
                        .WithMany("RattingFromCustomers")
                        .HasForeignKey("CommonRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server_app.Domain.Entities.Users.Customer.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommonRating");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.Reviews.ReviewEntity", b =>
                {
                    b.HasOne("server_app.Domain.Entities.ProductCategories.ProductCategoryEntity", "Category")
                        .WithMany("Reviews")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server_app.Domain.Entities.Users.Customer.CustomerEntity", "ReviewOwner")
                        .WithMany()
                        .HasForeignKey("ReviewOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ReviewOwner");
                });

            modelBuilder.Entity("server_app.Domain.Entities.Users.CreditCard.CreditCardEntity", b =>
                {
                    b.HasOne("server_app.Domain.Entities.Users.Customer.CustomerEntity", "Owner")
                        .WithOne("CreditCard")
                        .HasForeignKey("server_app.Domain.Entities.Users.CreditCard.CreditCardEntity", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_customers_credit_cards");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.Ratings.RatingEntity", b =>
                {
                    b.Navigation("RattingFromCustomers");
                });

            modelBuilder.Entity("server_app.Domain.Entities.ProductCategories.ProductCategoryEntity", b =>
                {
                    b.Navigation("PurchasedProducts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("server_app.Domain.Entities.Users.Customer.CustomerEntity", b =>
                {
                    b.Navigation("CreditCard")
                        .IsRequired();

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("server_app.Domain.Entities.Users.Seller.SellerEntity", b =>
                {
                    b.Navigation("ProductsCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
